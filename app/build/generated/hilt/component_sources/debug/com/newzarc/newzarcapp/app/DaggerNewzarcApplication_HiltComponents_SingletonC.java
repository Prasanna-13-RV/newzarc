// Generated by Dagger (https://dagger.dev).
package com.newzarc.newzarcapp.app;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.work.HiltWrapper_WorkerFactoryModule;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.newzarc.newzarcapp.MainActivity;
import com.newzarc.newzarcapp.data.api.NewsService;
import com.newzarc.newzarcapp.data.api.PostService;
import com.newzarc.newzarcapp.data.datasource.NewsCacheDataSource;
import com.newzarc.newzarcapp.data.datasource.NewsLocalDataSource;
import com.newzarc.newzarcapp.data.datasource.NewsRemoteDataSource;
import com.newzarc.newzarcapp.data.datasource.PostsRemoteDataSource;
import com.newzarc.newzarcapp.data.db.NewsDao;
import com.newzarc.newzarcapp.data.db.NewsDatabase;
import com.newzarc.newzarcapp.di.AppModule;
import com.newzarc.newzarcapp.di.CacheDataModule;
import com.newzarc.newzarcapp.di.CacheDataModule_ProvidesNewsCacheDataSourceFactory;
import com.newzarc.newzarcapp.di.DatabaseModule;
import com.newzarc.newzarcapp.di.DatabaseModule_ProvideNewsDaoFactory;
import com.newzarc.newzarcapp.di.DatabaseModule_ProvidesNewsDatabaseFactory;
import com.newzarc.newzarcapp.di.LocalDataModule;
import com.newzarc.newzarcapp.di.LocalDataModule_ProvidesNewsLocalDataSourceFactory;
import com.newzarc.newzarcapp.di.NetModule;
import com.newzarc.newzarcapp.di.NetModule_ProvidesNewsServiceFactory;
import com.newzarc.newzarcapp.di.NetModule_ProvidesPostsServiceFactory;
import com.newzarc.newzarcapp.di.NetModule_ProvidesRetrofitFactory;
import com.newzarc.newzarcapp.di.RemoteDataModule;
import com.newzarc.newzarcapp.di.RemoteDataModule_ProvideNewsDataSourceFactory;
import com.newzarc.newzarcapp.di.RemoteDataModule_ProvidePostsDataSourceFactory;
import com.newzarc.newzarcapp.di.RepositoryModule;
import com.newzarc.newzarcapp.di.RepositoryModule_ProvidesNewsRepositoryFactory;
import com.newzarc.newzarcapp.di.RepositoryModule_ProvidesPostsRepositoryFactory;
import com.newzarc.newzarcapp.di.UseCaseModule;
import com.newzarc.newzarcapp.di.UseCaseModule_ProvidesGetNewsUseCaseFactory;
import com.newzarc.newzarcapp.di.UseCaseModule_ProvidesGetPostsUseCaseFactory;
import com.newzarc.newzarcapp.di.UseCaseModule_ProvidesUpdateNewsUseCaseFactory;
import com.newzarc.newzarcapp.domain.repository.NewsRepository;
import com.newzarc.newzarcapp.domain.repository.PostsRepository;
import com.newzarc.newzarcapp.domain.usecase.GetNewsUseCase;
import com.newzarc.newzarcapp.domain.usecase.GetPostsUseCase;
import com.newzarc.newzarcapp.domain.usecase.UpdateNewsUseCase;
import com.newzarc.newzarcapp.viewmodel.NewsViewModel;
import com.newzarc.newzarcapp.viewmodel.NewsViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerNewzarcApplication_HiltComponents_SingletonC {
  private DaggerNewzarcApplication_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private CacheDataModule cacheDataModule;

    private DatabaseModule databaseModule;

    private LocalDataModule localDataModule;

    private NetModule netModule;

    private RemoteDataModule remoteDataModule;

    private RepositoryModule repositoryModule;

    private UseCaseModule useCaseModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder cacheDataModule(CacheDataModule cacheDataModule) {
      this.cacheDataModule = Preconditions.checkNotNull(cacheDataModule);
      return this;
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_WorkerFactoryModule(
        HiltWrapper_WorkerFactoryModule hiltWrapper_WorkerFactoryModule) {
      Preconditions.checkNotNull(hiltWrapper_WorkerFactoryModule);
      return this;
    }

    public Builder localDataModule(LocalDataModule localDataModule) {
      this.localDataModule = Preconditions.checkNotNull(localDataModule);
      return this;
    }

    public Builder netModule(NetModule netModule) {
      this.netModule = Preconditions.checkNotNull(netModule);
      return this;
    }

    public Builder remoteDataModule(RemoteDataModule remoteDataModule) {
      this.remoteDataModule = Preconditions.checkNotNull(remoteDataModule);
      return this;
    }

    public Builder repositoryModule(RepositoryModule repositoryModule) {
      this.repositoryModule = Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    public Builder useCaseModule(UseCaseModule useCaseModule) {
      this.useCaseModule = Preconditions.checkNotNull(useCaseModule);
      return this;
    }

    public NewzarcApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (cacheDataModule == null) {
        this.cacheDataModule = new CacheDataModule();
      }
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      if (localDataModule == null) {
        this.localDataModule = new LocalDataModule();
      }
      if (netModule == null) {
        this.netModule = new NetModule();
      }
      if (remoteDataModule == null) {
        this.remoteDataModule = new RemoteDataModule();
      }
      if (repositoryModule == null) {
        this.repositoryModule = new RepositoryModule();
      }
      if (useCaseModule == null) {
        this.useCaseModule = new UseCaseModule();
      }
      return new SingletonCImpl(applicationContextModule, cacheDataModule, databaseModule, localDataModule, netModule, remoteDataModule, repositoryModule, useCaseModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements NewzarcApplication_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public NewzarcApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements NewzarcApplication_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public NewzarcApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements NewzarcApplication_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public NewzarcApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements NewzarcApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public NewzarcApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements NewzarcApplication_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public NewzarcApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements NewzarcApplication_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public NewzarcApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements NewzarcApplication_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public NewzarcApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends NewzarcApplication_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends NewzarcApplication_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends NewzarcApplication_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends NewzarcApplication_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return Collections.<String>singleton(NewsViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends NewzarcApplication_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<NewsViewModel> newsViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.newsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return Collections.<String, Provider<ViewModel>>singletonMap("com.newzarc.newzarcapp.viewmodel.NewsViewModel", ((Provider) newsViewModelProvider));
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.newzarc.newzarcapp.viewmodel.NewsViewModel 
          return (T) new NewsViewModel(singletonCImpl.providesGetNewsUseCaseProvider.get(), singletonCImpl.providesUpdateNewsUseCaseProvider.get(), singletonCImpl.providesGetPostsUseCaseProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends NewzarcApplication_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends NewzarcApplication_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends NewzarcApplication_HiltComponents.SingletonC {
    private final UseCaseModule useCaseModule;

    private final RepositoryModule repositoryModule;

    private final RemoteDataModule remoteDataModule;

    private final NetModule netModule;

    private final LocalDataModule localDataModule;

    private final DatabaseModule databaseModule;

    private final ApplicationContextModule applicationContextModule;

    private final CacheDataModule cacheDataModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<Retrofit> providesRetrofitProvider;

    private Provider<NewsService> providesNewsServiceProvider;

    private Provider<NewsRemoteDataSource> provideNewsDataSourceProvider;

    private Provider<NewsDatabase> providesNewsDatabaseProvider;

    private Provider<NewsDao> provideNewsDaoProvider;

    private Provider<NewsLocalDataSource> providesNewsLocalDataSourceProvider;

    private Provider<NewsCacheDataSource> providesNewsCacheDataSourceProvider;

    private Provider<NewsRepository> providesNewsRepositoryProvider;

    private Provider<GetNewsUseCase> providesGetNewsUseCaseProvider;

    private Provider<UpdateNewsUseCase> providesUpdateNewsUseCaseProvider;

    private Provider<PostService> providesPostsServiceProvider;

    private Provider<PostsRemoteDataSource> providePostsDataSourceProvider;

    private Provider<PostsRepository> providesPostsRepositoryProvider;

    private Provider<GetPostsUseCase> providesGetPostsUseCaseProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam,
        CacheDataModule cacheDataModuleParam, DatabaseModule databaseModuleParam,
        LocalDataModule localDataModuleParam, NetModule netModuleParam,
        RemoteDataModule remoteDataModuleParam, RepositoryModule repositoryModuleParam,
        UseCaseModule useCaseModuleParam) {
      this.useCaseModule = useCaseModuleParam;
      this.repositoryModule = repositoryModuleParam;
      this.remoteDataModule = remoteDataModuleParam;
      this.netModule = netModuleParam;
      this.localDataModule = localDataModuleParam;
      this.databaseModule = databaseModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      this.cacheDataModule = cacheDataModuleParam;
      initialize(applicationContextModuleParam, cacheDataModuleParam, databaseModuleParam, localDataModuleParam, netModuleParam, remoteDataModuleParam, repositoryModuleParam, useCaseModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam,
        final CacheDataModule cacheDataModuleParam, final DatabaseModule databaseModuleParam,
        final LocalDataModule localDataModuleParam, final NetModule netModuleParam,
        final RemoteDataModule remoteDataModuleParam, final RepositoryModule repositoryModuleParam,
        final UseCaseModule useCaseModuleParam) {
      this.providesRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 4));
      this.providesNewsServiceProvider = DoubleCheck.provider(new SwitchingProvider<NewsService>(singletonCImpl, 3));
      this.provideNewsDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<NewsRemoteDataSource>(singletonCImpl, 2));
      this.providesNewsDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<NewsDatabase>(singletonCImpl, 7));
      this.provideNewsDaoProvider = DoubleCheck.provider(new SwitchingProvider<NewsDao>(singletonCImpl, 6));
      this.providesNewsLocalDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<NewsLocalDataSource>(singletonCImpl, 5));
      this.providesNewsCacheDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<NewsCacheDataSource>(singletonCImpl, 8));
      this.providesNewsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<NewsRepository>(singletonCImpl, 1));
      this.providesGetNewsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetNewsUseCase>(singletonCImpl, 0));
      this.providesUpdateNewsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<UpdateNewsUseCase>(singletonCImpl, 9));
      this.providesPostsServiceProvider = DoubleCheck.provider(new SwitchingProvider<PostService>(singletonCImpl, 13));
      this.providePostsDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<PostsRemoteDataSource>(singletonCImpl, 12));
      this.providesPostsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<PostsRepository>(singletonCImpl, 11));
      this.providesGetPostsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetPostsUseCase>(singletonCImpl, 10));
    }

    @Override
    public void injectNewzarcApplication(NewzarcApplication newzarcApplication) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.newzarc.newzarcapp.domain.usecase.GetNewsUseCase 
          return (T) UseCaseModule_ProvidesGetNewsUseCaseFactory.providesGetNewsUseCase(singletonCImpl.useCaseModule, singletonCImpl.providesNewsRepositoryProvider.get());

          case 1: // com.newzarc.newzarcapp.domain.repository.NewsRepository 
          return (T) RepositoryModule_ProvidesNewsRepositoryFactory.providesNewsRepository(singletonCImpl.repositoryModule, singletonCImpl.provideNewsDataSourceProvider.get(), singletonCImpl.providesNewsLocalDataSourceProvider.get(), singletonCImpl.providesNewsCacheDataSourceProvider.get());

          case 2: // com.newzarc.newzarcapp.data.datasource.NewsRemoteDataSource 
          return (T) RemoteDataModule_ProvideNewsDataSourceFactory.provideNewsDataSource(singletonCImpl.remoteDataModule, singletonCImpl.providesNewsServiceProvider.get());

          case 3: // com.newzarc.newzarcapp.data.api.NewsService 
          return (T) NetModule_ProvidesNewsServiceFactory.providesNewsService(singletonCImpl.netModule, singletonCImpl.providesRetrofitProvider.get());

          case 4: // retrofit2.Retrofit 
          return (T) NetModule_ProvidesRetrofitFactory.providesRetrofit(singletonCImpl.netModule);

          case 5: // com.newzarc.newzarcapp.data.datasource.NewsLocalDataSource 
          return (T) LocalDataModule_ProvidesNewsLocalDataSourceFactory.providesNewsLocalDataSource(singletonCImpl.localDataModule, singletonCImpl.provideNewsDaoProvider.get());

          case 6: // com.newzarc.newzarcapp.data.db.NewsDao 
          return (T) DatabaseModule_ProvideNewsDaoFactory.provideNewsDao(singletonCImpl.databaseModule, singletonCImpl.providesNewsDatabaseProvider.get());

          case 7: // com.newzarc.newzarcapp.data.db.NewsDatabase 
          return (T) DatabaseModule_ProvidesNewsDatabaseFactory.providesNewsDatabase(singletonCImpl.databaseModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 8: // com.newzarc.newzarcapp.data.datasource.NewsCacheDataSource 
          return (T) CacheDataModule_ProvidesNewsCacheDataSourceFactory.providesNewsCacheDataSource(singletonCImpl.cacheDataModule);

          case 9: // com.newzarc.newzarcapp.domain.usecase.UpdateNewsUseCase 
          return (T) UseCaseModule_ProvidesUpdateNewsUseCaseFactory.providesUpdateNewsUseCase(singletonCImpl.useCaseModule, singletonCImpl.providesNewsRepositoryProvider.get());

          case 10: // com.newzarc.newzarcapp.domain.usecase.GetPostsUseCase 
          return (T) UseCaseModule_ProvidesGetPostsUseCaseFactory.providesGetPostsUseCase(singletonCImpl.useCaseModule, singletonCImpl.providesPostsRepositoryProvider.get());

          case 11: // com.newzarc.newzarcapp.domain.repository.PostsRepository 
          return (T) RepositoryModule_ProvidesPostsRepositoryFactory.providesPostsRepository(singletonCImpl.repositoryModule, singletonCImpl.providePostsDataSourceProvider.get());

          case 12: // com.newzarc.newzarcapp.data.datasource.PostsRemoteDataSource 
          return (T) RemoteDataModule_ProvidePostsDataSourceFactory.providePostsDataSource(singletonCImpl.remoteDataModule, singletonCImpl.providesPostsServiceProvider.get());

          case 13: // com.newzarc.newzarcapp.data.api.PostService 
          return (T) NetModule_ProvidesPostsServiceFactory.providesPostsService(singletonCImpl.netModule, singletonCImpl.providesRetrofitProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
