// Generated by Dagger (https://dagger.dev).
package com.newzarc.newzarcapp.di;

import com.newzarc.newzarcapp.domain.repository.PostsRepository;
import com.newzarc.newzarcapp.domain.usecase.GetPostsUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvidesGetPostsUseCaseFactory implements Factory<GetPostsUseCase> {
  private final UseCaseModule module;

  private final Provider<PostsRepository> postsRepositoryProvider;

  public UseCaseModule_ProvidesGetPostsUseCaseFactory(UseCaseModule module,
      Provider<PostsRepository> postsRepositoryProvider) {
    this.module = module;
    this.postsRepositoryProvider = postsRepositoryProvider;
  }

  @Override
  public GetPostsUseCase get() {
    return providesGetPostsUseCase(module, postsRepositoryProvider.get());
  }

  public static UseCaseModule_ProvidesGetPostsUseCaseFactory create(UseCaseModule module,
      Provider<PostsRepository> postsRepositoryProvider) {
    return new UseCaseModule_ProvidesGetPostsUseCaseFactory(module, postsRepositoryProvider);
  }

  public static GetPostsUseCase providesGetPostsUseCase(UseCaseModule instance,
      PostsRepository postsRepository) {
    return Preconditions.checkNotNullFromProvides(instance.providesGetPostsUseCase(postsRepository));
  }
}
