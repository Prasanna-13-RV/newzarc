// Generated by Dagger (https://dagger.dev).
package com.newzarc.newzarcapp.di;

import com.newzarc.newzarcapp.data.db.NewsDao;
import com.newzarc.newzarcapp.data.db.NewsDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideNewsDaoFactory implements Factory<NewsDao> {
  private final DatabaseModule module;

  private final Provider<NewsDatabase> newsDatabaseProvider;

  public DatabaseModule_ProvideNewsDaoFactory(DatabaseModule module,
      Provider<NewsDatabase> newsDatabaseProvider) {
    this.module = module;
    this.newsDatabaseProvider = newsDatabaseProvider;
  }

  @Override
  public NewsDao get() {
    return provideNewsDao(module, newsDatabaseProvider.get());
  }

  public static DatabaseModule_ProvideNewsDaoFactory create(DatabaseModule module,
      Provider<NewsDatabase> newsDatabaseProvider) {
    return new DatabaseModule_ProvideNewsDaoFactory(module, newsDatabaseProvider);
  }

  public static NewsDao provideNewsDao(DatabaseModule instance, NewsDatabase newsDatabase) {
    return Preconditions.checkNotNullFromProvides(instance.provideNewsDao(newsDatabase));
  }
}
