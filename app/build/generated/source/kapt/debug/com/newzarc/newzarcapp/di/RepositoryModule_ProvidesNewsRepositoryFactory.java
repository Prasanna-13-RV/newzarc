// Generated by Dagger (https://dagger.dev).
package com.newzarc.newzarcapp.di;

import com.newzarc.newzarcapp.data.datasource.NewsCacheDataSource;
import com.newzarc.newzarcapp.data.datasource.NewsLocalDataSource;
import com.newzarc.newzarcapp.data.datasource.NewsRemoteDataSource;
import com.newzarc.newzarcapp.domain.repository.NewsRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvidesNewsRepositoryFactory implements Factory<NewsRepository> {
  private final RepositoryModule module;

  private final Provider<NewsRemoteDataSource> newsRemoteDataSourceProvider;

  private final Provider<NewsLocalDataSource> newsLocalDataSourceProvider;

  private final Provider<NewsCacheDataSource> newsCacheDataSourceProvider;

  public RepositoryModule_ProvidesNewsRepositoryFactory(RepositoryModule module,
      Provider<NewsRemoteDataSource> newsRemoteDataSourceProvider,
      Provider<NewsLocalDataSource> newsLocalDataSourceProvider,
      Provider<NewsCacheDataSource> newsCacheDataSourceProvider) {
    this.module = module;
    this.newsRemoteDataSourceProvider = newsRemoteDataSourceProvider;
    this.newsLocalDataSourceProvider = newsLocalDataSourceProvider;
    this.newsCacheDataSourceProvider = newsCacheDataSourceProvider;
  }

  @Override
  public NewsRepository get() {
    return providesNewsRepository(module, newsRemoteDataSourceProvider.get(), newsLocalDataSourceProvider.get(), newsCacheDataSourceProvider.get());
  }

  public static RepositoryModule_ProvidesNewsRepositoryFactory create(RepositoryModule module,
      Provider<NewsRemoteDataSource> newsRemoteDataSourceProvider,
      Provider<NewsLocalDataSource> newsLocalDataSourceProvider,
      Provider<NewsCacheDataSource> newsCacheDataSourceProvider) {
    return new RepositoryModule_ProvidesNewsRepositoryFactory(module, newsRemoteDataSourceProvider, newsLocalDataSourceProvider, newsCacheDataSourceProvider);
  }

  public static NewsRepository providesNewsRepository(RepositoryModule instance,
      NewsRemoteDataSource newsRemoteDataSource, NewsLocalDataSource newsLocalDataSource,
      NewsCacheDataSource newsCacheDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.providesNewsRepository(newsRemoteDataSource, newsLocalDataSource, newsCacheDataSource));
  }
}
