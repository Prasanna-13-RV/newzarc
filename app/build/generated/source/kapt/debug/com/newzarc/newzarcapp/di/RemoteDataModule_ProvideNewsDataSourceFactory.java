// Generated by Dagger (https://dagger.dev).
package com.newzarc.newzarcapp.di;

import com.newzarc.newzarcapp.data.api.NewsService;
import com.newzarc.newzarcapp.data.datasource.NewsRemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteDataModule_ProvideNewsDataSourceFactory implements Factory<NewsRemoteDataSource> {
  private final RemoteDataModule module;

  private final Provider<NewsService> newsServiceProvider;

  public RemoteDataModule_ProvideNewsDataSourceFactory(RemoteDataModule module,
      Provider<NewsService> newsServiceProvider) {
    this.module = module;
    this.newsServiceProvider = newsServiceProvider;
  }

  @Override
  public NewsRemoteDataSource get() {
    return provideNewsDataSource(module, newsServiceProvider.get());
  }

  public static RemoteDataModule_ProvideNewsDataSourceFactory create(RemoteDataModule module,
      Provider<NewsService> newsServiceProvider) {
    return new RemoteDataModule_ProvideNewsDataSourceFactory(module, newsServiceProvider);
  }

  public static NewsRemoteDataSource provideNewsDataSource(RemoteDataModule instance,
      NewsService newsService) {
    return Preconditions.checkNotNullFromProvides(instance.provideNewsDataSource(newsService));
  }
}
